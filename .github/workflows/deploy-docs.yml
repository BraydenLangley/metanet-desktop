name: Deploy Documentation

on:
  workflow_run:
    workflows: ["release"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest release info and update download links
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Getting latest release information...');
            
            // Get the latest release
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.name
            }).catch(error => {
              console.log('Error getting latest release, falling back to releases list:', error);
              return null;
            });
            
            let releaseData;
            if (latestRelease) {
              releaseData = latestRelease.data;
              console.log(`Found latest release: ${releaseData.name} (${releaseData.tag_name})`);
            } else {
              // Fallback: Get list of releases and take the most recent one
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.name
              });
              
              if (releases.data.length > 0) {
                releaseData = releases.data[0];
                console.log(`Found release from list: ${releaseData.name} (${releaseData.tag_name})`);
              } else {
                console.log('No releases found!');
                return;
              }
            }
            
            // Extract asset information and create JSON file for docs to reference
            const assets = releaseData.assets.map(asset => ({
              name: asset.name,
              browser_download_url: asset.browser_download_url,
              size: asset.size,
              download_count: asset.download_count,
              created_at: asset.created_at,
              updated_at: asset.updated_at,
              content_type: asset.content_type
            }));
            
            // Create downloadsInfo object
            const downloadsInfo = {
              release_version: releaseData.tag_name,
              release_name: releaseData.name,
              release_date: releaseData.published_at,
              release_url: releaseData.html_url,
              assets: assets
            };
            
            // Ensure docs directory exists
            const fs = require('fs');
            if (!fs.existsSync('docs')){
              fs.mkdirSync('docs', { recursive: true });
            }
            
            // Write download info to JSON file that can be loaded by the docs
            fs.writeFileSync('docs/release-info.json', JSON.stringify(downloadsInfo, null, 2));
            console.log('Release information written to docs/release-info.json');
            
            // Optionally generate a simple HTML include file with download links
            let htmlContent = `
            <div class="download-section">
              <h2>Download Metanet Desktop</h2>
              <p>Latest version: ${downloadsInfo.release_version} (${new Date(downloadsInfo.release_date).toLocaleDateString()})</p>
              <ul class="download-links">
            `;
            
            // Add links for each platform
            for (const asset of assets) {
              let platform = '';
              if (asset.name.includes('linux') || asset.name.includes('AppImage')) {
                platform = 'Linux';
              } else if (asset.name.includes('windows') || asset.name.includes('.exe')) {
                platform = 'Windows';
              } else if (asset.name.includes('darwin') || asset.name.includes('mac') || asset.name.includes('.dmg')) {
                if (asset.name.includes('x86_64')) {
                  platform = 'macOS Intel';
                } else if (asset.name.includes('aarch64') || asset.name.includes('arm64')) {
                  platform = 'macOS Apple Silicon';
                } else {
                  platform = 'macOS';
                }
              }
              
              if (platform) {
                htmlContent += `
                <li>
                  <a href="${asset.browser_download_url}" class="download-button ${platform.toLowerCase().replace(' ', '-')}">
                    <span class="platform">${platform}</span>
                    <span class="filename">${asset.name}</span>
                    <span class="filesize">${(asset.size / 1024 / 1024).toFixed(1)} MB</span>
                  </a>
                </li>
                `;
              }
            }
            
            htmlContent += `
              </ul>
              <p class="release-notes-link">
                <a href="${downloadsInfo.release_url}">View Release Notes</a>
              </p>
            </div>
            `;
            
            fs.writeFileSync('docs/download-links.html', htmlContent);
            console.log('Download links HTML generated at docs/download-links.html');

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
