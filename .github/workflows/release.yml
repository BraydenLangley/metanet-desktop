name: 'release'

on:
  push:
    branches:
      - master

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # for Universal macOS builds (arm64 and x86_64)
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - name: import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.METANET_APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.METANET_APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.METANET_KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate
        id: verify_certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "BSV")
          echo "CERT_INFO=$CERT_INFO"
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "cert_id=$CERT_ID" >> $GITHUB_OUTPUT
          echo "Certificate imported."

      - name: build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.METANET_GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.METANET_APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.METANET_APPLE_ID_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.METANET_APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.METANET_APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.METANET_APPLE_CERTIFICATE }}
          APPLE_SIGNING_IDENTITY: ${{ steps.verify_certificate.outputs.cert_id }}
        with:
          tagName: metanet-desktop-v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: "Metanet Desktop v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}